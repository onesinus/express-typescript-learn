openapi: 3.0.3
info:
  title: Swagger Express JS - OpenAPI 3.0
  description: Example open api swagger
  version: 1.0.11
servers:
  - url: http://localhost:6969/v1
tags:
  - name: post
    description: Everything about your posts
  - name: user
    description: Operations about user
paths:
  /posts:
    get:
      tags:
        - post
      summary: Get posts
      description: Get posts data
      operationId: getPosts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      tags:
        - post
      summary: Update an existing post
      description: Update an existing post by Id
      operationId: updatePost
      requestBody:
        description: Update an existing post in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid ID supplied
        '404':
          description: post not found
        '422':
          description: Validation exception
    post:
      tags:
        - post
      summary: Add a new post to the store
      description: Add a new post to the store
      operationId: addPost
      requestBody:
        description: Create a new post in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /posts/{postId}:
    get:
      tags:
        - post
      summary: Find post by ID
      description: Returns a single post
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid ID supplied
        '404':
          description: post not found
    put:
      tags:
        - post
      summary: Updates a post in the store with form data
      description: ''
      operationId: updatePostWithForm
      parameters:
        - name: postId
          in: path
          description: ID of post that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: title
          in: query
          description: Title of post that needs to be updated
          schema:
            type: string
        - name: content
          in: query
          description: Content of post that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
    delete:
      tags:
        - post
      summary: Deletes a post
      description: delete a post
      operationId: deletePost
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: postId
          in: path
          description: post id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid post value
  /users:
    get:
      tags:
        - user
      summary: Get users
      description: Get users data
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      tags:
        - user
      summary: Get user by id
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The id that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: email
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid email supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: theUser
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: password123
    Post:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Example Title
        content:
          type: string
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
